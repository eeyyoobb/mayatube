// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  createdAt DateTime @default(now())
  subscribedChannelIds String[] @db.ObjectId
  likedVideoIds String[] @db.ObjectId
  dislikedVideoIds String[] @db.ObjectId
  isLogged Boolean
  expreience String

  account Account?
  channel Channel?
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId @unique
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@unique([provider, providerAccountId])
}

model Channel {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId @unique
  name String
  handle String
  imageSrc String
  createdAt DateTime @default(now())
  subscriberCount Int @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 

  comments Comment[]
  videos Video[]
}

model Video {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  channelId String @db.ObjectId
  title String
  description String
  likeCount Int @default(0)
  dislikeCount Int @default(0)
  viewCount Int @default(0)
  createdAt DateTime @default(now())
  thumbnailSrc String
  videoSrc String

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  comments Comment[]
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  videoId String @db.ObjectId
  channelId String @db.ObjectId
  text String
  createdAt DateTime @default(now())

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
}
model Quiz {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  icon              String
  quizTitle         String
  quizQuestions     Question[] @relation("QuizQuestions")

  @@map("quizzes") // Optional: Map to a different collection name
}
model Question {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  mainQuestion      String
  choices           String[]
  correctAnswer     Int
  answeredResult    Int        @default(-1)
  explanation       String?    // Optional string field
  statistics        Statistics? @relation(fields: [statisticsId], references: [id])
  statisticsId      String?    @unique @db.ObjectId  // Marked as unique to enforce 1-to-1 relationship
  quiz              Quiz?      @relation("QuizQuestions", fields: [quizId], references: [id])
  quizId            String?    @db.ObjectId

  @@map("questions") // Optional: Map to a different collection name
}

model Statistics {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  totalAttempts     Int        @default(0)
  correctAttempts   Int        @default(0)
  incorrectAttempts Int        @default(0)
  question          Question?  @relation() // Only reference the Question model
  questionId        String?    @db.ObjectId

  @@map("statistics") // Optional: Map to a different collection name
}



